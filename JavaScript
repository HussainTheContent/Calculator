import { useState } from 'react';

export default function Calculator() {
  const [display, setDisplay] = useState('0');
  const [prevValue, setPrevValue] = useState(null);
  const [operation, setOperation] = useState(null);
  const [newNumber, setNewNumber] = useState(true);

  const handleNumber = (num) => {
    if (newNumber) {
      setDisplay(String(num));
      setNewNumber(false);
    } else {
      setDisplay(display === '0' ? String(num) : display + num);
    }
  };

  const handleDecimal = () => {
    if (newNumber) {
      setDisplay('0.');
      setNewNumber(false);
    } else if (!display.includes('.')) {
      setDisplay(display + '.');
    }
  };

  const handleOperation = (op) => {
    const current = parseFloat(display);
    
    if (prevValue === null) {
      setPrevValue(current);
    } else if (operation) {
      const result = calculate(prevValue, current, operation);
      setDisplay(String(result));
      setPrevValue(result);
    }
    
    setOperation(op);
    setNewNumber(true);
  };

  const calculate = (a, b, op) => {
    switch (op) {
      case '+': return a + b;
      case '-': return a - b;
      case '×': return a * b;
      case '÷': return a / b;
      default: return b;
    }
  };

  const handleEquals = () => {
    if (operation && prevValue !== null) {
      const current = parseFloat(display);
      const result = calculate(prevValue, current, operation);
      setDisplay(String(result));
      setPrevValue(null);
      setOperation(null);
      setNewNumber(true);
    }
  };

  const handleClear = () => {
    setDisplay('0');
    setPrevValue(null);
    setOperation(null);
    setNewNumber(true);
  };

  const handleToggleSign = () => {
    setDisplay(String(parseFloat(display) * -1));
  };

  const handlePercent = () => {
    setDisplay(String(parseFloat(display) / 100));
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-gray-900 to-gray-800 p-4">
      <div className="bg-black rounded-3xl shadow-2xl p-6 w-full max-w-sm">
        <div className="bg-gray-900 rounded-2xl p-6 mb-4 min-h-24 flex items-end justify-end">
          <div className="text-white text-5xl font-light break-all text-right">
            {display}
          </div>
        </div>
        
        <div className="grid grid-cols-4 gap-3">
          <button onClick={handleClear} className="bg-gray-400 hover:bg-gray-300 text-black text-xl font-semibold rounded-full h-16 transition">
            AC
          </button>
          <button onClick={handleToggleSign} className="bg-gray-400 hover:bg-gray-300 text-black text-xl font-semibold rounded-full h-16 transition">
            +/-
          </button>
          <button onClick={handlePercent} className="bg-gray-400 hover:bg-gray-300 text-black text-xl font-semibold rounded-full h-16 transition">
            %
          </button>
          <button onClick={() => handleOperation('÷')} className="bg-orange-500 hover:bg-orange-400 text-white text-3xl font-light rounded-full h-16 transition">
            ÷
          </button>

          <button onClick={() => handleNumber(7)} className="bg-gray-700 hover:bg-gray-600 text-white text-2xl font-light rounded-full h-16 transition">
            7
          </button>
          <button onClick={() => handleNumber(8)} className="bg-gray-700 hover:bg-gray-600 text-white text-2xl font-light rounded-full h-16 transition">
            8
          </button>
          <button onClick={() => handleNumber(9)} className="bg-gray-700 hover:bg-gray-600 text-white text-2xl font-light rounded-full h-16 transition">
            9
          </button>
          <button onClick={() => handleOperation('×')} className="bg-orange-500 hover:bg-orange-400 text-white text-3xl font-light rounded-full h-16 transition">
            ×
          </button>

          <button onClick={() => handleNumber(4)} className="bg-gray-700 hover:bg-gray-600 text-white text-2xl font-light rounded-full h-16 transition">
            4
          </button>
          <button onClick={() => handleNumber(5)} className="bg-gray-700 hover:bg-gray-600 text-white text-2xl font-light rounded-full h-16 transition">
            5
          </button>
          <button onClick={() => handleNumber(6)} className="bg-gray-700 hover:bg-gray-600 text-white text-2xl font-light rounded-full h-16 transition">
            6
          </button>
          <button onClick={() => handleOperation('-')} className="bg-orange-500 hover:bg-orange-400 text-white text-3xl font-light rounded-full h-16 transition">
            -
          </button>

          <button onClick={() => handleNumber(1)} className="bg-gray-700 hover:bg-gray-600 text-white text-2xl font-light rounded-full h-16 transition">
            1
          </button>
          <button onClick={() => handleNumber(2)} className="bg-gray-700 hover:bg-gray-600 text-white text-2xl font-light rounded-full h-16 transition">
            2
          </button>
          <button onClick={() => handleNumber(3)} className="bg-gray-700 hover:bg-gray-600 text-white text-2xl font-light rounded-full h-16 transition">
            3
          </button>
          <button onClick={() => handleOperation('+')} className="bg-orange-500 hover:bg-orange-400 text-white text-3xl font-light rounded-full h-16 transition">
            +
          </button>

          <button onClick={() => handleNumber(0)} className="bg-gray-700 hover:bg-gray-600 text-white text-2xl font-light rounded-full h-16 col-span-2 transition">
            0
          </button>
          <button onClick={handleDecimal} className="bg-gray-700 hover:bg-gray-600 text-white text-2xl font-light rounded-full h-16 transition">
            .
          </button>
          <button onClick={handleEquals} className="bg-orange-500 hover:bg-orange-400 text-white text-3xl font-light rounded-full h-16 transition">
            =
          </button>
        </div>
      </div>
    </div>
  );
}
